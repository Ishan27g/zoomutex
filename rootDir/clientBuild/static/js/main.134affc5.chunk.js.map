{"version":3,"sources":["../node_modules/peerjs/dist sync","context/PeerContext.ts","context/SocketContext.ts","context/ContextProvider.tsx","components/Room/Video.tsx","components/Room/VideoList.tsx","components/Room/route.ts","components/Room/useUserMedia.ts","components/Room/Room.tsx","components/Home/Home.tsx","App.tsx","components/Home/route.ts","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","peer","Peer","host","port","path","PeerContext","React","createContext","socket","io","window","location","origin","SocketContext","ContextProvider","children","Provider","value","Video","mediaStream","videoRef","useRef","console","log","current","srcObject","autoPlay","playsInline","ref","VideoList","streams","elements","key","hasOwnProperty","push","roomRoute","useUserMedia","requestedMedia","useState","setMediaStream","useEffect","getTracks","forEach","track","stop","a","navigator","mediaDevices","getUserMedia","stream","error","enableStream","Room","match","useRouteMatch","useContext","params","roomId","userId","userMediaStream","audio","video","setStreams","addCallToRoom","useCallback","call","on","updatedStreams","callPeer","deferredUserIds","length","onPeerOpen","emit","onUserConnected","connectedUserId","answerCall","answer","onbeforeunload","disconnect","destroy","className","Home","v4","to","replace","App","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.134affc5.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 56;","import Peer from \"peerjs\";\nimport React from \"react\";\n\nconst SERVER_PEER_PORT = 9000;\nconst SERVER_URL = 'localhost'\nconst PEER_ENDPOINt = '/peerServer'\n\nexport const peer = new Peer(\"\", {\n  //  debug: 2,\n    host: SERVER_URL,\n    port: SERVER_PEER_PORT,\n    path: PEER_ENDPOINt\n});\n\nexport const PeerContext = React.createContext(peer);\n","import React from \"react\";\nimport { io } from \"socket.io-client\";\n\nexport const socket = io(window.location.origin);\nexport const SocketContext = React.createContext(socket);\n","import { PeerContext, peer } from \"./PeerContext\";\nimport { SocketContext, socket } from \"./SocketContext\";\n\nexport interface ContextProviderProps {\n  children: JSX.Element;\n}\n\nexport const ContextProvider = ({\n  children,\n}: ContextProviderProps): JSX.Element => {\n  return (\n    <SocketContext.Provider value={socket}>\n      <PeerContext.Provider value={peer}>{children}</PeerContext.Provider>\n    </SocketContext.Provider>\n  );\n};\n","import { useRef } from \"react\";\n\nexport interface VideoProps {\n  mediaStream: MediaStream | null;\n}\n\nconst Video = ({ mediaStream }: VideoProps): JSX.Element => {\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n\n  if (mediaStream === null) {\n    console.log(\"media stream is null\");\n  } else {\n    console.log(\"media stream is valid\")\n  }\n\n  if (videoRef.current) {\n    videoRef.current.srcObject = mediaStream;\n  }\n\n  return <video autoPlay playsInline ref={videoRef} />;\n};\n\nexport default Video;\n","import Video from \"./Video\";\n\nexport interface Streams {\n  [userId: string]: MediaStream;\n}\n\nexport interface VideoListProps {\n  streams: Streams;\n}\n\nconst VideoList = ({ streams }: VideoListProps): JSX.Element => {\n  const elements: JSX.Element[] = [];\n\n  for (const key in streams) {\n    if (streams.hasOwnProperty(key)) {\n      elements.push(<Video key={key} mediaStream={streams[key]} />);\n    }\n  }\n\n  return <>{elements}</>;\n};\n\nexport default VideoList;\n","export const roomRoute = \"/join/:roomId\";\n","import { useEffect, useState } from \"react\";\n\nconst useUserMedia = (\n  requestedMedia?: MediaStreamConstraints\n): MediaStream | null => {\n  const [mediaStream, setMediaStream] = useState<MediaStream | null>(null);\n\n  useEffect(() => {\n    const enableStream = async (): Promise<void> => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia(\n          requestedMedia\n        );\n        setMediaStream(stream);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    const cleanup = (): void => {\n      mediaStream?.getTracks().forEach((track) => track.stop());\n    };\n\n    if (!mediaStream) {\n      enableStream();\n    } else {\n      return cleanup;\n    }\n  }, [mediaStream, requestedMedia]);\n\n  return mediaStream;\n};\n\nexport default useUserMedia;\n","import \"./styles.css\";\n\nimport { PeerContext, SocketContext } from \"../../context\";\nimport VideoList, { Streams } from \"./VideoList\";\nimport { useCallback, useContext, useEffect, useRef, useState } from \"react\";\n\nimport { MediaConnection } from \"peerjs\";\nimport Video from \"./Video\";\nimport { roomRoute } from \"./route\";\nimport { useRouteMatch } from \"react-router\";\nimport useUserMedia from \"./useUserMedia\";\n\ninterface RoomPathArgs {\n  roomId?: string;\n}\n\ninterface UserConnectedArgs {\n  userId?: string;\n}\n\nconst Room = (): JSX.Element => {\n  const match = useRouteMatch<RoomPathArgs>(roomRoute);\n\n  const socket = useContext(SocketContext);\n  const peer = useContext(PeerContext);\n\n  const [roomId] = useState<string | undefined>(match?.params.roomId);\n  const userId = peer.id\n\n  const userMediaStream = useUserMedia({ audio: true, video: true });\n  const [streams, setStreams] = useState<Streams>({});\n\n  const addCallToRoom = useCallback(\n    (call: MediaConnection) => {\n      console.log(\"handle call\");\n\n      call.on(\"stream\", (stream) => {\n        console.log(`adding stream for ${userId}`);\n        setStreams({\n          ...streams,\n          [userId]: stream,\n        });\n      });\n\n      call.on(\"close\", () => {\n        console.log(`closing call for ${userId}`);\n\n        const updatedStreams = { ...streams };\n        delete updatedStreams[userId];\n        setStreams(updatedStreams);\n      });\n\n      console.log(`user connected: ${userId}`);\n    },\n    [streams, userId]\n  );\n\n  const callPeer = useCallback(\n    (userId: string) => {\n      console.log(\"call joining group\");\n      if (!userMediaStream) {\n        return;\n      }\n\n      // Call the user who just joined\n      const call = peer.call(userId, userMediaStream);\n      addCallToRoom(call);\n    },\n    [addCallToRoom, peer, userMediaStream]\n  );\n\n  const deferredUserIds = useRef<string[]>([]);\n\n  useEffect(() => {\n    console.log(`calling ${deferredUserIds.current.length} deferred user ids`);\n\n    for (const userId of deferredUserIds.current) {\n      callPeer(userId);\n    }\n\n    deferredUserIds.current = [];\n  }, [callPeer]);\n\n  // When we first open the app, join a room\n  const onPeerOpen = useCallback(\n    (userId: string): void => {\n      if (!roomId) {\n        return;\n      }\n\n      socket.emit(\"join-room\", { roomId, userId });\n    },\n    [roomId, socket]\n  );\n\n  const onUserConnected = useCallback(\n    ({ userId: connectedUserId }: UserConnectedArgs): void => {\n      console.log(\"user attempting to connect\");\n\n      if (!connectedUserId) {\n        return;\n      }\n\n      if (!userMediaStream) {\n        deferredUserIds.current.push(connectedUserId);\n        console.log(\n          `deferred userId ${connectedUserId} while waiting for connection`\n        );\n        return;\n      }\n\n      callPeer(connectedUserId);\n    },\n    [callPeer, userMediaStream]\n  );\n\n  const answerCall = useCallback(\n    (call: MediaConnection) => {\n      if (userMediaStream) {\n        console.log(\"answering call\");\n        call.answer(userMediaStream);\n      } else {\n        console.error(\"could not answer call\");\n      }\n    },\n    [userMediaStream]\n  );\n\n  useEffect(() => {\n    if (!roomId || !userMediaStream) {\n      console.log(\"waiting for user media stream\");\n      return;\n    }\n\n    console.log(\"joining room\");\n    socket.emit(\"join-room\", { roomId, userId });\n    socket.on(\"user-connected\", onUserConnected);\n\n    peer.on(\"open\", onPeerOpen);\n    peer.on(\"call\", answerCall);\n  }, [\n    answerCall,\n    onPeerOpen,\n    onUserConnected,\n    peer,\n    roomId,\n    socket,\n    userId,\n    userMediaStream,\n  ]);\n\n  useEffect(() => {\n    window.onbeforeunload = () => {\n      console.log(\"cleaning up\");\n      socket.disconnect();\n      peer.destroy();\n    };\n  }, [peer, socket]);\n\n  if (match === null || !match.params.roomId) {\n    return <div>Invalid room</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"room-title\">Room {match.params.roomId}</div>\n      <div className=\"video-grid\">\n        <Video mediaStream={userMediaStream} />\n        <VideoList streams={streams} />\n      </div>\n    </div>\n  );\n};\n\nexport default Room;\n","import { Redirect } from \"react-router\";\nimport { roomRoute } from \"../Room\";\nimport { v4 } from \"uuid\";\n\nconst Home = (): JSX.Element => {\n  const id = v4();\n  return <Redirect to={roomRoute.replace(\":roomId\", id)} />;\n};\n\nexport default Home;\n","import Home, { homeRoute } from './components/Home';\nimport Room, { roomRoute } from './components/Room';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\n\nimport React from 'react';\n\nconst App = (): JSX.Element => {\n  return (\n    <Router>\n      <Switch>\n        <Route path={homeRoute} exact={true} component={Home} />\n        <Route path={roomRoute} exact={true} component={Room} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","export const homeRoute = \"/\";\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import App from \"./App\";\nimport { ContextProvider } from \"./context\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <ContextProvider>\n    <App />\n  </ContextProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}